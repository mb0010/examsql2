-- # EXAM FOR WEEK 8

-- ## KEEP IN MIND: YOU ARE DOING THIS FOR YOUR BRIGHT FUTURE, SO GIVE YOUR 120%!
-- ## ПОМНИТЕ: ВЫ ДЕЛАЕТЕ ЭТО ДЛЯ СВОЕГО СВЕТЛОГО БУДУЩЕГО, ПОЭТОМУ ВЫКЛАДЫВАЙТЕСЬ НА ВСЕ СВОИ 120%!

-- ## RULES:
-- > No interner, no help to each other!

-- > Make one file and place all your work there (e.g. azizmurod_orifzoda.py)

-- > Send the file at 

-- > You have 2 hours only

-- ### Task 1 - CREATE
-- Create tables: Employees, Departments, Locations, Jobs. 
--  - Employees: id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commision_pct, department_id.
--  - Departments: id, department_name, manager_name, location_id.
--  - Locations: id, city, region, street_address.
--  - Jobs: id, title, is_active.
--  Realationships:
--  - one to one: Departments with Location
--  - one to many: Departments with Employees
--  - one to many: Jobs with Employees

create table Employees
(
id serial primary key,
first_name varchar(50) NOT NULL,
last_name varchar(50) NOT NULL,
email varchar(50) NOT NULL,
phone_number varchar(13) NOT NULL,
hire_date timestamp NOT NULL,
job_id int references Job(id),
salary int NOT NULL,
commision_pct varchar(50) NOT NULL,
department_id int references Departments(id)
)

create table Departments
(
id serial primary key,
department_name varchar(50) NOT NULL,
manager_name varchar(50) NOT NULL,
location_id int references Locations(id)
)

create table Locations
(
id serial primary key,
city varchar(50) NOT NULL,
region varchar(50) NOT NULL,
street_address varchar(50) NOT NULL
)

create table Job
(
id serial primary key,
title varchar(50) NOT NULL,
is_active varchar(50) NOT NULL
)
-- ### Task 2 - INSERT
--  - INSEERT 5 JOBS - backend, frontend, fullstack, designer, manager.

insert into Job(title,is_active) values
('backend','Yes'),
('frontend','Yes'),
('fullstack','Yes'),
('designer','Yes'),
('manager','Yes')

select * from Employees

--  - INSERT 3 DEPARTMENTS - management, accontant, development

insert into Departments(department_name,manager_name) values
('management','Qurobonov Ali'),
('accontant','Arbobzoda Shamsiddin'),
('development','Boronov Muhammad')

--  - INSERT 5 LOCATION - any location
insert into Locations(city,region,street_address) values
('Dushanbe','Sino','Rahimi'),
('Bokhtar','Balkhi','Asadullo'),
('Kulob','Maskovski','Ayni'),
('Khujand','Rumi','Beruni'),
('Vahdat','Somoni','Ayni')
--  - INSERT 10 EMPLOYEES:
--     - 3 employees must be managers of each department(3 сотрудника должны быть менеджерами каждого отдела
--     - 5 employees must be developers (5 сотрудников должны быть разработчиками)
--     - 2 сотрудника должны быть из бухгалтерии
insert into Employees(first_name,last_name,email,phone_number,hire_date,job_id,salary,commision_pct,department_id) values
('Muhammad','Boronov','muhammad@gmail.com','+992989900010','2024-09-09',1,'100000','10',3),
('ali','Qurbonov','ali@gmail.com','+992989901010','2024-06-24',1,'10000','10%',3),
('Shamsiddin','Arbobzoda','arbobzoda@gmail.com','+992989900020','2020-01-01',1,'50000','10%',3),
('Sunatullo','Ibragimov','sunat@gmail.com','+992979920030','2022-10-10',1,'40000','10%',3),
('Tavhid','Vohidov','tavhid@gmail.com','+992989902010','2021-03-07',1,'30000','10%',3),
('Nurali','Boronov','nurali@gmail.com','+992003888863','2024-01-01',4,'10000','10%',2),
('Sunatullo','Kabirov','kabirov@gmail.com','+992003452222','2019-01-01',4,'10000','10%',2),
('Sakiev','Khairiddin','sakhiev@gmail.com','+992003666663','2015-04-03',5,'60000','10%',1),
('Kabir','Gaurov','kabir@gmail.com','+992936666663','2017-06-08',5,'60000','10%',1),
('Jurakhon','Majidzoda','jura@gmail.com','+992993776663','2019-04-03',5,'34000','10%',1)

-- ### Task 3 ALTER
--     a) Add a column to store employee birthdate (Добавьте столбец для хранения даты рождения сотрудника)
Alter table Employees add date_birthday timestamp
--     b) Change the data type of phone_number in employees to allow more characters (Измените тип данных phone_number в employees, чтобы разрешить больше символов)
Alter table Employees 
Alter column phone_number type varchar(20)
--     c) Rename the commission_pct column to commission_percentage in employees(Переименуйте столбец commission_pct в commission_percentage в employees)
Alter table Employees 
Alter column commission_pct rename commission_percentage
--     d) Add a unique constraint on the email column in employees if it wasn't defined before (Добавьте уникальное ограничение для столбца email в employees, если оно не было определено ранее)
ALTER TABLE Employees
ADD CONSTRAINT email UNIQUE (email)
--     e) Modify the is_active column in the jobs table to default to TRUE (Измените столбец is_active в таблице jobs, чтобы значение по умолчанию было TRUE)
ALTER TABLE Job
ADD CONSTRAINT is_active DEFAULT 'TRUE' FOR is_active
-- ### Task 4 SELECT
--     a) Filter all departments located in 'New York' (Отфильтровать все отделы, расположенные в «Нью-Йорке»)
select city from Locations where city = 'New York'
--     b) Filter all employees hired after January 1, 2022 (Отфильтровать всех сотрудников, нанятых после 1 января 2022 г.)
select hire_date from Employees where hire_date > '2022-01-01'
--     c) Filter employees whose email ends with '@example.com' (Отфильтровать сотрудников, чей адрес электронной почты заканчивается на «@example.com»)
select email from Employees where email like '%@example.com'
--     d) Filter jobs where the title contains the word 'Manager' (Отфильтровать вакансии, в названии которых содержится слово «Менеджер»)
select title from Job where title = 'Manager'
--     e) Filter employees who do not belong to the departments with ids 2 and 4 (Отфильтровать сотрудников, которые не относятся к отделам с идентификаторами 2 и 4)
select department_id from Employees where department_id = 2 or department_id = 4
--     f) Filter employees with a salary between 4000 and 8000 (Отфильтровать сотрудников с зарплатой от 4000 до 8000)
select salary from Employees where salary > 4000 and salary < 8000

-- ### Task 5 JOIN
--     a) Retrieve all employees along with their department names (Получить всех сотрудников вместе с названиями их отделов)

--     b) Retrieve all employees, their department names, and the location city (Получить всех сотрудников, названия их отделов и город расположения)

--     d) Retrieve all departments and their managers' names (include departments without managers) (Получить все отделы и имена их менеджеров (включая отделы без менеджеров))

--     e) Retrieve all employees and their departments, including employees without departments and departments without employees (Получить всех сотрудников и их отделы, включая сотрудников без отделов и отделы без сотрудников)

--     f) Retrieve employees who work in the 'Sales' department along with their job titles (Получить сотрудников, которые работают в отделе «Продажи», вместе с их должностями)

--     g) Retrieve the number of employees in each department (Получить количество сотрудников в каждом отделе)

--     h) Retrieve employees whose salary is higher than the average salary of their department (Получить сотрудников, чья зарплата выше средней зарплаты их отдела)